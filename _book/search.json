[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VA Summer Conference Case Study",
    "section": "",
    "text": "Welcome\nAs part of an ongoing staffing crisis, you have been asked by your director to reproduce a report that was produced under the last research director, who is now on a beach, enjoying her retirement, and unreachable. You asked your only analyst to try to reproduce the report, but they have not yet been able to, and there doesn’t seem to be any record of how the numbers were produced. The report establishes recidivism rates for several key programs and provides staffing levels for those programs. Your director wants to make the case that the DOC needs staff to implement successful programs. This is in response to a group of hostile legislators (a mix of far-right fiscal conservatives who do not believe in prison programs and far-left “de-funders” who think your budget is too big). They are running a bill to reduce your overall budget and eliminate some existing staff vacancies, with the argument that if you have survived for the past two years with your current staffing levels, you must be doing okay.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "index.html#case-study-narrative",
    "href": "index.html#case-study-narrative",
    "title": "VA Summer Conference Case Study",
    "section": "Case Study Narrative",
    "text": "Case Study Narrative\n\nScenario\nAmidst a swirling staffing crisis at the Gotham Department of Corrections (GDOC), you find yourself in a peculiar predicament. Your director, the fearsome Evelyn “Firebrand” Summers, has thrust upon you the Herculean task of resurrecting a report forged under the previous Research Director Miranda “Mermaid” Shelsky. Dr. Shelsky, now retired and sipping mojitos on a secluded beach in Fiji, left behind a report detailing recidivism rates and the indispensable staffing needs for DOC’s prized programs.\nThe report establishes recidivism rates for several key supervision/reentry programs for high risk people and provides staffing levels for these programs. Director Summers is depending on you to build a case to keep the necessary staff to implement these programs successfully.\nYou ask your only analyst to try to reproduce the report, yet there mysteriously doesn’t seem to be any record of how the original report’s numbers were produced. Your analyst has spent 3 days and cannot seem to figure out the formula. The analyst is also now 3 days behind on other tasks that have been assigned and it is time to move on.\nMeanwhile, the ever-persistent Center Wing Coalition (CWC) are crafting a bill to counteract all of the progress your agency has been making in your recidivism-reduction efforts. The CWC argue that, if your agency has survived for the past two years with current staffing levels, you must be doing okay and are advocating to cut your overall allocated FTE. Meanwhile, your staff is working overtime through lunch, and you are certain you saw at least two team members browsing on Indeed last week.\nYou’re in a tight bind, and time is ticking. Not to mention, your best friend has planned a getaway next month in Las Vegas. You paid for this trip over six months ago and you have no intention of missing it. However, you have no desire to be sitting in the Blue Man Group show thinking about this data…",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "index.html#about-virtual-academy",
    "href": "index.html#about-virtual-academy",
    "title": "VA Summer Conference Case Study",
    "section": "About Virtual Academy",
    "text": "About Virtual Academy\nThe Advancing Data in Corrections initiative includes a Virtual Academy, which builds data literacy and analytic capabilities within departments of corrections nationwide to further data-informed planning and decision-making. Through their participation in the Virtual Academy, corrections agency staff can access the program’s self-paced learning materials, community forum, peer-to-peer networks, and technical assistance at no cost.\nFor more information about the program and the tools, services, and opportunies available, visit the Virtual Academy website.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "va_cs.html",
    "href": "va_cs.html",
    "title": "Advancing Data in Corrections: Virtual Academy Case Study",
    "section": "",
    "text": "Introduction\nOur DOC captures 10 Evidence Based Recidivism Reduction (EBRR) programs in 2021 listed by the Federal Bureau of Prisons and the individuals involved:\nYour DOC Research Department tracks clients served and staff involved in running and supporting these programs.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Advancing Data in Corrections: Virtual Academy Case Study</span>"
    ]
  },
  {
    "objectID": "va_cs.html#introduction",
    "href": "va_cs.html#introduction",
    "title": "Advancing Data in Corrections: Virtual Academy Case Study",
    "section": "",
    "text": "Anger Management\nThe Bureau Rehabilitation and Values Enhancement Program\nBasic Cognitive Skills\nThe Resolve Program\nResidential Drug Abuse Program\nDialectical Behavior Therapy\nSex Offender Treatment Program\nChallenge Program\nMental Health Step Down Program\nSteps Toward Awareness, Growth, and Emotional Strength Program",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Advancing Data in Corrections: Virtual Academy Case Study</span>"
    ]
  },
  {
    "objectID": "va_cs.html#data-exploration",
    "href": "va_cs.html#data-exploration",
    "title": "Advancing Data in Corrections: Virtual Academy Case Study",
    "section": "Data Exploration",
    "text": "Data Exploration\nLet’s take a look at our roster! The name of our data is roster. Let’s take a peek under the hood and see what variables/columns we have, and a quick summary of what they all look like. We know that our DOC has 10 programs.\n\n\nCode\n#what's in our data\nsummary(roster)\nnumcol &lt;- ncol(roster)\nprint(numcol)\n#&gt;  client_names            age          datestart            programs        \n#&gt;  Length:55          Min.   :19.00   Min.   :2021-02-15   Length:55         \n#&gt;  Class :character   1st Qu.:25.00   1st Qu.:2021-06-15   Class :character  \n#&gt;  Mode  :character   Median :29.00   Median :2022-01-07   Mode  :character  \n#&gt;                     Mean   :28.71   Mean   :2021-12-08                     \n#&gt;                     3rd Qu.:32.00   3rd Qu.:2022-05-17                     \n#&gt;                     Max.   :41.00   Max.   :2022-12-06                     \n#&gt;     returns      \n#&gt;  Min.   :0.0000  \n#&gt;  1st Qu.:0.0000  \n#&gt;  Median :0.0000  \n#&gt;  Mean   :0.2909  \n#&gt;  3rd Qu.:1.0000  \n#&gt;  Max.   :1.0000  \n#&gt; [1] 5\n\n\nInteresting! It appears we have 5 variables in the roster data! Let’s just lift the hood a tiny bit more.\n\n\nCode\n#peek under the hood\nhead(roster)\n#&gt;           client_names age  datestart programs returns\n#&gt; 1           Murl Kunde  32 2021-02-15      bcs       0\n#&gt; 2         Breana Ebert  27 2021-02-17      brv       0\n#&gt; 3 Dr. Tre Armstrong II  33 2021-03-07      bcs       0\n#&gt; 4      Beckham Gerhold  27 2022-06-07      bcs       0\n#&gt; 5     Mr. Elihu Klocko  29 2022-04-28  resolve       1\n#&gt; 6           Murl Kunde  32 2021-02-15      bcs       0\n\n\nFascinating! It looks like person-level data! Let’s learn more about some of the potentially relevant variables.\n\n\nCode\n#distribution of returns\nhist(roster$returns)\n\n\n\n\n\n\n\n\n\nCode\n\n#distribution of age\nhist(roster$age)\n\n\n\n\n\n\n\n\n\nWhat other pieces of information might be relevant to what we need to know about the data? How about since it appears to be person-level that we check to make sure that there aren’t any duplicates?\n\n\nCode\n#are there any duplicates?\nroster[duplicated(roster) | duplicated(roster, fromLast=TRUE),]\n\n#how many duplicates?\ndupct &lt;- length(unique(\n  roster[duplicated(roster) | duplicated(roster, fromLast=TRUE),]\n  ))\nprint(dupct)\n#&gt;            client_names age  datestart programs returns\n#&gt; 1            Murl Kunde  32 2021-02-15      bcs       0\n#&gt; 2          Breana Ebert  27 2021-02-17      brv       0\n#&gt; 3  Dr. Tre Armstrong II  33 2021-03-07      bcs       0\n#&gt; 4       Beckham Gerhold  27 2022-06-07      bcs       0\n#&gt; 5      Mr. Elihu Klocko  29 2022-04-28  resolve       1\n#&gt; 6            Murl Kunde  32 2021-02-15      bcs       0\n#&gt; 7          Breana Ebert  27 2021-02-17      brv       0\n#&gt; 8  Dr. Tre Armstrong II  33 2021-03-07      bcs       0\n#&gt; 9       Beckham Gerhold  27 2022-06-07      bcs       0\n#&gt; 10     Mr. Elihu Klocko  29 2022-04-28  resolve       1\n#&gt; [1] 5\n\n\nWow! It looks like we have 5 duplicate observations/rows in our data! Let’s remove them and keep exploring!\n\n\nCode\n#deduplicate across all columns\nroster.nodup &lt;- roster[!duplicated(roster), ]\n\n#check for dups again\nroster.nodup[duplicated(roster.nodup) | duplicated(roster.nodup, fromLast=TRUE),]\n#&gt; [1] client_names age          datestart    programs     returns     \n#&gt; &lt;0 rows&gt; (or 0-length row.names)\n\n\nAlright! No more duplicates! No let’s take a closer look at our 10 programs.\n\n\nCode\n#count total number of programs\nprgnum &lt;- n_distinct(roster.nodup$programs)\nprint(prgnum)\n#&gt; [1] 14\n\n\nHm - it looks like there are more than 10 programs; 14 programs to be exact. Let’s see what’s going on here.\n\n\nCode\n#list out the actual program names\nroster.nodup |&gt;\n  count(programs)\n#&gt;     programs  n\n#&gt; 1         am  1\n#&gt; 2        bcs 10\n#&gt; 3        bgs  1\n#&gt; 4      brave  5\n#&gt; 5        brv  1\n#&gt; 6  challenge  3\n#&gt; 7        dbt  5\n#&gt; 8        fbt  1\n#&gt; 9       mhsd  2\n#&gt; 10      rdap  5\n#&gt; 11       rdp  2\n#&gt; 12   resolve  7\n#&gt; 13     sotrt  3\n#&gt; 14    stages  4\n\n\nAh! It looks like there are some errors in your data! Clean them up so you can accurately report all EBRR programs and their associated recidivism rates\n\n\nCode\n#clean program names\nroster.clean &lt;- roster.nodup |&gt;\n  mutate(programs_clean = case_when(programs == \"bgs\" ~ \"bcs\",\n                                    programs == \"fbt\" ~ \"dbt\",\n                                    programs == \"brv\" ~ \"brave\",\n                                    programs == \"rdp\" ~ \"rdap\",\n                                    TRUE ~ programs))\n\n#check cleaned program names\nroster.clean |&gt;\n  count(programs_clean,programs)\n#&gt;    programs_clean  programs  n\n#&gt; 1              am        am  1\n#&gt; 2             bcs       bcs 10\n#&gt; 3             bcs       bgs  1\n#&gt; 4           brave     brave  5\n#&gt; 5           brave       brv  1\n#&gt; 6       challenge challenge  3\n#&gt; 7             dbt       dbt  5\n#&gt; 8             dbt       fbt  1\n#&gt; 9            mhsd      mhsd  2\n#&gt; 10           rdap      rdap  5\n#&gt; 11           rdap       rdp  2\n#&gt; 12        resolve   resolve  7\n#&gt; 13          sotrt     sotrt  3\n#&gt; 14         stages    stages  4\n\n\nMuch better! 10 programs as expected for our DOC. Now let’s see what’s going on with this returns variable when cross-tabbed with our 10 programs.\n\n\nCode\n#recidivism by program count\nroster.clean |&gt;\n  count(programs_clean,returns)\n#&gt;    programs_clean returns  n\n#&gt; 1              am       1  1\n#&gt; 2             bcs       0 10\n#&gt; 3             bcs       1  1\n#&gt; 4           brave       0  5\n#&gt; 5           brave       1  1\n#&gt; 6       challenge       0  1\n#&gt; 7       challenge       1  2\n#&gt; 8             dbt       0  3\n#&gt; 9             dbt       1  3\n#&gt; 10           mhsd       0  2\n#&gt; 11           rdap       0  4\n#&gt; 12           rdap       1  3\n#&gt; 13        resolve       0  5\n#&gt; 14        resolve       1  2\n#&gt; 15          sotrt       0  3\n#&gt; 16         stages       0  2\n#&gt; 17         stages       1  2\n\n\nLet’s calculate recidivism rates for all of our programs! It looks like we have data across two years from the datestart column, from 2021-02-15 to 2022-12-06, so perhaps we should calculate recidivism rates overall and by year!\n\n\nCode\n##create dataset of numerators and denominators\n#recidivism rates overall\nroster2.1 &lt;- roster.clean |&gt;\n  mutate(year = factor(year(datestart))) |&gt;\n  select(-c(client_names,age,programs)) |&gt;\n  group_by(programs_clean) |&gt;\n  count(returns) |&gt;\n  mutate(clients_served = sum(n),\n         recid_rate_all = case_when(returns == 1 ~ round(n/clients_served,2),\n                                returns == 0 ~ 0)\n         ) |&gt;\n  group_by(programs_clean) |&gt;\n  slice(n()) |&gt;\n  select(-c(returns, n)) |&gt;\n  rename(clients_served_all = clients_served)\n#print out recidivism rates overall years\nroster2.1 |&gt;\n  select(programs_clean,recid_rate_all) |&gt;\n  kable(format=\"html\")\n\n#recidivism rates by year\nroster2.2 &lt;- roster.clean |&gt;\n  mutate(year = factor(year(datestart))) |&gt;\n  select(-c(client_names,age,programs)) |&gt;\n  group_by(programs_clean,year) |&gt;\n  count(returns,year) |&gt;\n  mutate(clients_served = sum(n),\n         recid_rate_year= case_when(returns == 1 ~ round(n/clients_served,2),\n                                returns == 0 ~ 0)\n         ) |&gt;\n  group_by(programs_clean,year) |&gt;\n  slice(n()) |&gt;\n  select(-c(returns, n)) |&gt;\n  rename(clients_served_year = clients_served)\n#print out recidivism rates by year\nroster2.2 |&gt;\n  arrange(year,programs_clean) |&gt;\n  select(year,programs_clean,recid_rate_year) |&gt;\n  kable(format=\"html\")\n\n#combine data by programs to capture recidivism rates overall and by year\nroster2 &lt;- inner_join(roster2.1, roster2.2, by = \"programs_clean\")\n#verify that join did not lose any observations\nanti_join(roster2.1, roster2.2, by = \"programs_clean\")\n\n\n\n\n\nprograms_clean\nrecid_rate_all\n\n\n\n\nam\n1.00\n\n\nbcs\n0.09\n\n\nbrave\n0.17\n\n\nchallenge\n0.67\n\n\ndbt\n0.50\n\n\nmhsd\n0.00\n\n\nrdap\n0.43\n\n\nresolve\n0.29\n\n\nsotrt\n0.00\n\n\nstages\n0.50\n\n\n\n\n\n\n\n\n\nyear\nprograms_clean\nrecid_rate_year\n\n\n\n\n2021\nbcs\n0.11\n\n\n2021\nbrave\n0.25\n\n\n2021\nchallenge\n0.00\n\n\n2021\ndbt\n0.50\n\n\n2021\nmhsd\n0.00\n\n\n2021\nrdap\n0.50\n\n\n2021\nresolve\n0.00\n\n\n2021\nsotrt\n0.00\n\n\n2021\nstages\n0.00\n\n\n2022\nam\n1.00\n\n\n2022\nbcs\n0.00\n\n\n2022\nbrave\n0.00\n\n\n2022\nchallenge\n1.00\n\n\n2022\ndbt\n0.50\n\n\n2022\nmhsd\n0.00\n\n\n2022\nrdap\n0.40\n\n\n2022\nresolve\n0.40\n\n\n2022\nsotrt\n0.00\n\n\n2022\nstages\n1.00\n\n\n\n\n\n\n#&gt; # A tibble: 0 × 3\n#&gt; # Groups:   programs_clean [0]\n#&gt; # ℹ 3 variables: programs_clean &lt;chr&gt;, clients_served_all &lt;int&gt;,\n#&gt; #   recid_rate_all &lt;dbl&gt;\n\nLet’s take a look at our program staffing! Our DOC captures 10 Evidence Based Recidivism Reduction (EBRR) programs listed by the Federal Bureau of Prisons and the individuals involved.The name of our data is staff.\n\n\nCode\n#what's in our data\nsummary(staff)\n\nnumcolst &lt;- ncol(staff)\nprint(numcolst)\n#&gt;     staff               prg           \n#&gt;  Length:80          Length:80         \n#&gt;  Class :character   Class :character  \n#&gt;  Mode  :character   Mode  :character  \n#&gt; [1] 2\n\n\nIt appears we only have 2 variables in the program staffing data. Let’s keep exploring!\n\n\nCode\n#take a peek\nhead(staff)\n#&gt;                   staff     prg\n#&gt; 1 Mrs. Skyler Sawayn MD   brave\n#&gt; 2        Telly Mitchell     dbt\n#&gt; 3       Watson O'Conner  stages\n#&gt; 4          Ruthie Wolff   brave\n#&gt; 5       Efrain Koch DDS resolve\n#&gt; 6 Miss. Kristan Flatley   brave\n\n\nWell, well, well - person-level data again! Why don’t we check for duplicates just in case?\n\n\nCode\n#are there any duplicates?\nstaff[duplicated(staff) | duplicated(staff, fromLast=TRUE),]\n#&gt; [1] staff prg  \n#&gt; &lt;0 rows&gt; (or 0-length row.names)\n\n\nPhew! No duplicates. That was a close one. Now let’s take a closer look at our 10 programs covered by these staff.\n\n\nCode\n#count total number of programs\nprgnum.stf &lt;- n_distinct(staff$prg)\nprint(prgnum.stf)\n#&gt; [1] 13\n\n\nWell - it looks like yet again we have data with more than 10 programs; 13 to be exact. Let’s see what’s going on here.\n\n\nCode\n#list out the actual program names\nstaff |&gt;\n  count(prg)\n#&gt;          prg  n\n#&gt; 1         am  2\n#&gt; 2        bcs  4\n#&gt; 3      brave  6\n#&gt; 4        brv  2\n#&gt; 5  challenge  4\n#&gt; 6        dbt 15\n#&gt; 7       mhsd  6\n#&gt; 8       rdap  5\n#&gt; 9      resol  2\n#&gt; 10   resolve  6\n#&gt; 11     sotrt 11\n#&gt; 12    stages 12\n#&gt; 13       stg  5\n\n\nIt looks like there are some errors in your data (again!?)! Clean them up so you can accurately report all EBRR programs and their associated program staff.\n\n\nCode\n#clean program names\nstaff.clean &lt;- staff |&gt;\n  mutate(programs_clean = case_when(prg == \"resol\" ~ \"resolve\",\n                                    prg == \"brv\" ~ \"brave\",\n                                    prg == \"stg\" ~ \"stages\",\n                                    TRUE ~ prg))\n\n#check cleaned program names\nstaff.clean |&gt;\n  count(programs_clean,prg)\n#&gt;    programs_clean       prg  n\n#&gt; 1              am        am  2\n#&gt; 2             bcs       bcs  4\n#&gt; 3           brave     brave  6\n#&gt; 4           brave       brv  2\n#&gt; 5       challenge challenge  4\n#&gt; 6             dbt       dbt 15\n#&gt; 7            mhsd      mhsd  6\n#&gt; 8            rdap      rdap  5\n#&gt; 9         resolve     resol  2\n#&gt; 10        resolve   resolve  6\n#&gt; 11          sotrt     sotrt 11\n#&gt; 12         stages    stages 12\n#&gt; 13         stages       stg  5\n\n\nMuch better! Now let’s see how many staff we have by program!\n\n\nCode\n#create dataset of staff counts\nstaff2 &lt;- staff.clean |&gt;\n  select(-c(staff,prg)) |&gt;\n  count(programs_clean) |&gt;\n  rename(num_staff = n)\n\n#print staffing\nprint(staff2)\n\n#histogram of staffing\nhist(staff2$num_staff)\n\n\n\n\n\n\n\n\n#&gt;    programs_clean num_staff\n#&gt; 1              am         2\n#&gt; 2             bcs         4\n#&gt; 3           brave         8\n#&gt; 4       challenge         4\n#&gt; 5             dbt        15\n#&gt; 6            mhsd         6\n#&gt; 7            rdap         5\n#&gt; 8         resolve         8\n#&gt; 9           sotrt        11\n#&gt; 10         stages        17",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Advancing Data in Corrections: Virtual Academy Case Study</span>"
    ]
  },
  {
    "objectID": "va_cs.html#reporting-results",
    "href": "va_cs.html#reporting-results",
    "title": "Advancing Data in Corrections: Virtual Academy Case Study",
    "section": "Reporting Results",
    "text": "Reporting Results\nWe have to get out those results now! Let’s combine the program staff and recidivism rates dataframes so we can print out a table!\n\n\nCode\ntabout &lt;- inner_join(roster2, staff2, by = (\"programs_clean\")) |&gt;\n  select(-c(clients_served_all, clients_served_year)) |&gt;\n  ungroup() |&gt;\n  #if any years are missing, fill in\n  complete(year, nesting(programs_clean,num_staff),\n           fill = list(recid_rate_all = NA, recid_rate_year = NA)\n  ) |&gt;\n  #correct missing values for recid_rate_all since this is the overall recidivism rate across multiple years\n  group_by(programs_clean) |&gt;\n  fill(recid_rate_all, .direction = \"updown\")\n#verify join was successful\nanti_join(roster2, staff2, by = (\"programs_clean\"))\n\n#overall recidivism rates\ntabout |&gt; \n  filter(year==date1) |&gt;\n  select(-c(year, recid_rate_year)) |&gt;\n  kable(format = \"html\", caption = \"Overall recidivism rates by program\")\n\n#overall recidivism rates\ntabout |&gt; \n  select(-c(recid_rate_all)) |&gt;\n  kable(format = \"html\", caption = \"Recidivism rates by program by year\")\n\n#&gt; # A tibble: 0 × 6\n#&gt; # Groups:   programs_clean [0]\n#&gt; # ℹ 6 variables: programs_clean &lt;chr&gt;, clients_served_all &lt;int&gt;,\n#&gt; #   recid_rate_all &lt;dbl&gt;, year &lt;fct&gt;, clients_served_year &lt;int&gt;,\n#&gt; #   recid_rate_year &lt;dbl&gt;\n\n\n\nOverall recidivism rates by program\n\n\nprograms_clean\nnum_staff\nrecid_rate_all\n\n\n\n\nam\n2\n1.00\n\n\nbcs\n4\n0.09\n\n\nbrave\n8\n0.17\n\n\nchallenge\n4\n0.67\n\n\ndbt\n15\n0.50\n\n\nmhsd\n6\n0.00\n\n\nrdap\n5\n0.43\n\n\nresolve\n8\n0.29\n\n\nsotrt\n11\n0.00\n\n\nstages\n17\n0.50\n\n\n\n\n\n\n\nRecidivism rates by program by year\n\n\nyear\nprograms_clean\nnum_staff\nrecid_rate_year\n\n\n\n\n2021\nam\n2\nNA\n\n\n2021\nbcs\n4\n0.11\n\n\n2021\nbrave\n8\n0.25\n\n\n2021\nchallenge\n4\n0.00\n\n\n2021\ndbt\n15\n0.50\n\n\n2021\nmhsd\n6\n0.00\n\n\n2021\nrdap\n5\n0.50\n\n\n2021\nresolve\n8\n0.00\n\n\n2021\nsotrt\n11\n0.00\n\n\n2021\nstages\n17\n0.00\n\n\n2022\nam\n2\n1.00\n\n\n2022\nbcs\n4\n0.00\n\n\n2022\nbrave\n8\n0.00\n\n\n2022\nchallenge\n4\n1.00\n\n\n2022\ndbt\n15\n0.50\n\n\n2022\nmhsd\n6\n0.00\n\n\n2022\nrdap\n5\n0.40\n\n\n2022\nresolve\n8\n0.40\n\n\n2022\nsotrt\n11\n0.00\n\n\n2022\nstages\n17\n1.00\n\n\n\n\n\n\n\nBut what if we want a nice data visualization of it all?\n\n\nCode\n#basic bar chart of overall recidivism rate by program\nggplot(tabout |&gt;\n         filter(year == date1)\n       ,aes(x=programs_clean, y=recid_rate_all)) +\n  geom_bar(stat=\"identity\")\n\n\n\n\n\n\n\n\n\nCode\n\n#basic bar chart of recidivism rate by year by program\nggplot(tabout,aes(x=programs_clean, y=recid_rate_year,fill=year)) +\n         geom_bar(position=\"dodge\", stat=\"identity\")\n\n\n\n\n\n\n\n\n\nNicer!!!\n\n\nCode\n#build bar chart of recidivism rates across programs\n#information to plot, pick dates\ndates &lt;- as.numeric(c(date1,date2)) #what years of data do you want to plot?\n\n#custom title header of plot\ntitledates &lt;- ifelse(length(dates)&gt;=2 & date1 != date2, paste0(date1,\" - \",date2),\n                     ifelse((dates==date1 | dates==date2) & ALL.BY, as.character(dates),\n                            ifelse(length(dates)&gt;=2 & date1 == date2 & !ALL.BY,date1,\"\")))\n\n#which years/programs are missing data?\nprg.NA &lt;- tabout |&gt; \n  filter(is.na(recid_rate_year)) |&gt;\n  pull(programs_clean)\n\n#plot it! this will plot recidivism rates with overlaid staffing text\nrr &lt;- ggplot(tabout |&gt; \n               filter(if(ALL.BY) year %in% dates else year == date2) |&gt;\n               mutate(recid_rate = case_when(ALL.BY  ~ recid_rate_year,\n                                             !ALL.BY ~ recid_rate_all))\n             ,aes(x=programs_clean, y=recid_rate, fill=year)) +\n  geom_bar(position = \"dodge\",stat = \"identity\") +\n  geom_text(aes(label=ifelse(year==dates[2],paste(num_staff,\"staff\"),\"\")), vjust=-0.3, color = \"brown\") +\n  scale_fill_manual(values=c(\"lightblue\", \"darkolivegreen3\")) +\n  ylim(0,1) +\n  ylab(\"Recidivism Rate\") +\n  xlab(\"EBBR Programs\") +\n  ggtitle(paste0(\"Recidivism Rates across EBBR programs\\n\",titledates)) +\n  theme_classic() +\n  #remove legend if plotting overall (not by year)\n  {if(!ALL.BY) theme(legend.position=\"none\")}+\n  #only print caption if a program is missing data\n  {if(length(prg.NA)!=0) labs(caption = capture.output(cat(\"The following programs were missing data in some years:\", unique(toupper(prg.NA)), sep=\" \")))}+\n  theme(plot.caption=element_text(hjust=0))\n\n#display\nrr\n\n\n\n\n\n\n\n\n\nOh no!! An advocacy group just publicly published that EBBR programs’ recidivism rates are at an all time high of 62% with a report that claims to have used your DOC’s reported data on EBBR program recidivism rates! Find out what’s going on, and fast!\n\n\nCode\n#manage the data to produce recidivism rates\ntabout2 &lt;- inner_join(roster2, staff2, by = (\"programs_clean\")) |&gt;\n  ungroup() |&gt;\n  #if any years are missing, fill in\n  complete(year, nesting(programs_clean,num_staff),\n           fill = list(recid_rate_all = NA, recid_rate_year = NA)\n  ) |&gt;\n  #correct missing values for recid_rate_all since this is the overall recidivism rate across multiple years\n  group_by(programs_clean) |&gt;\n  fill(c(recid_rate_all,clients_served_all), .direction = \"updown\")\n#verify join was successful\nanti_join(roster2, staff2, by = (\"programs_clean\"))\n\n#calculate average recidivism rate across programs from all years\nunw.a &lt;- round(mean(tabout2$recid_rate_all,na.rm=TRUE),2)\nprint(paste0(unw.a*100,\"%\"))\n\n#calculate average recidivism rate across programs from year 1\nunw.d1 &lt;- round(mean(tabout2[which(tabout2$year==date1),]$recid_rate_year,na.rm=TRUE),2)\nprint(paste0(unw.d1*100,\"%\"))\n\n#calculate average recidivism rate across programs from year 2\nunw.d2 &lt;- round(mean(tabout2[which(tabout2$year==date2),]$recid_rate_year,na.rm=TRUE),2)\nprint(paste0(unw.d2*100,\"%\"))\n#&gt; # A tibble: 0 × 6\n#&gt; # Groups:   programs_clean [0]\n#&gt; # ℹ 6 variables: programs_clean &lt;chr&gt;, clients_served_all &lt;int&gt;,\n#&gt; #   recid_rate_all &lt;dbl&gt;, year &lt;fct&gt;, clients_served_year &lt;int&gt;,\n#&gt; #   recid_rate_year &lt;dbl&gt;\n#&gt; [1] \"36%\"\n#&gt; [1] \"15%\"\n#&gt; [1] \"43%\"\n\n\nWell a recidivism rate of 36% is much better, but it still doesn’t match what the advocacy group is reporting! Keep investigating!\n\n\nCode\n#programs to remove\nrm.pgms &lt;- c(\"bcs\", \"brave\", \"sotrt\", \"mhsd\", \"resolve\")\n\n\n\n\nCode\n#remove 5 of the 10 programs because the advocacy group was sneaky\nadv &lt;- tabout |&gt;\n  filter(!(programs_clean %in% rm.pgms) &\n             year == date1) #dates repeat the same information, so just pick one date to average over\n#calculate ADVOCACY rate, which will be inserted into document text\nadv_rate &lt;- round(mean(adv$recid_rate_all,na.rm=TRUE)*100,1)\nprint(adv_rate)\n#&gt; [1] 62\n\n\nAlright! There’s the number the advocacy group reported! But what’s missing?\n\n\nCode\n#manage the data to produce recidivism rates\n#total clients served (all years)\ntotal.a &lt;- sum(tabout2[which(tabout2$year==date1),]$clients_served_all)\ntabout2.wgt &lt;- tabout2 |&gt;\n  filter(year==date1) |&gt;\n  mutate(recid_rate_all_w = clients_served_all*recid_rate_all)\nw.a &lt;- round(sum(tabout2.wgt$recid_rate_all_w)/total.a,2)\nprint(paste0(w.a*100,\"%\"))\n\n#total clients served (all years), JUST 5 PROGRAMS!!!\ntotal.a5 &lt;- sum(tabout2[which(tabout2$year==date1 & !tabout2$programs_clean %in% rm.pgms),]$clients_served_all)\ntabout2.wgt5 &lt;- tabout2 |&gt;\n  filter(!(programs_clean %in% rm.pgms) & year==date1) |&gt;\n  mutate(recid_rate_all_w = clients_served_all*recid_rate_all)\nw.a5 &lt;- round(sum(tabout2.wgt5$recid_rate_all_w)/total.a5,2)\nprint(paste0(w.a5*100,\"%\"))\n#&gt; [1] \"30%\"\n#&gt; [1] \"52%\"\n\n\nAlright! If we just weight our data then we see that the average overall recidivism rate across the five programs that the advocacy group highlighted is only 52%. Great work!\nNow let’s report it through some fancy data visualization work.\n\n\nCode\n#which weights to plot\nw   &lt;- if(ALL.BY) c(w.d1,w.d2) else w.a\nunw &lt;- if(ALL.BY) c(unw.d1,unw.d2) else unw.a\n\n#for positioning\nlast &lt;- tail(tabout$programs_clean,n=1)\n\n#add recidivism weight averages to plot\nrr + geom_hline(yintercept=w[1], linetype = \"dashed\", color = \"orange\", size = 1) +\n  {if(ALL.BY) geom_hline(yintercept=w[2], linetype = \"dashed\", color = \"orange\", size = 1)}+\n  geom_hline(yintercept=unw[1], linetype = \"dashed\", color = \"darkgrey\", size = 1) +\n  {if(ALL.BY) geom_hline(yintercept=unw[2], linetype = \"dashed\", color = \"darkgrey\", size = 1)}+\n  geom_label_repel(aes(label=lab, y=0.25), fill=\"orange\",\n             data = tabout |&gt;\n               filter(if(ALL.BY) year %in% dates else year == date2) |&gt;\n               mutate(recid_rate = case_when( ALL.BY  ~ recid_rate_year,\n                                             !ALL.BY ~ recid_rate_all),\n                      lab        = case_when( ALL.BY &  date1 != date2 ~ paste0(date1,\" Weighted avg: \",w[1],\"\\n\",date2,\" Weighted avg: \",w[2]),\n                                             !ALL.BY &  date1 != date2 ~ paste0(date1,\"-\",date2,\"\\nWeighted avg: \",w[1]),\n                                              ALL.BY &  date1 == date2 ~ paste0(date1,\"\\nWeighted avg: \",w[1]))) |&gt;\n               filter(programs_clean == last & year == date2),\n             nudge_x = -4,\n             min.segment.length = Inf) + \n  geom_label_repel(aes(label=lab, y=0.5), fill=\"grey\",\n             data = tabout |&gt;\n               filter(if(ALL.BY) year %in% dates else year == date2) |&gt;\n               mutate(recid_rate = case_when( ALL.BY  ~ recid_rate_year,\n                                             !ALL.BY ~ recid_rate_all),\n                      lab        = case_when( ALL.BY &  date1 != date2 ~ paste0(date1,\" Unweighted avg: \",unw[1],\"\\n\",date2,\" Unweighted avg: \",unw[2]),\n                                             !ALL.BY &  date1 != date2 ~ paste0(date1,\"-\",date2,\"\\nUnweighted avg: \",unw[1]),\n                                              ALL.BY &  date1 == date2 ~ paste0(date1,\"\\nUnweighted avg: \",unw[1]))) |&gt;\n               filter(programs_clean == last & year == date2),\n             nudge_x = -8,\n             min.segment.length = Inf\n  ) \n\n\n\n\n\n\n\n\n\nUh oh! Looks like a new roster was just dropped with more years of data. Quick! Redo the analysis with the new data!\n\n\nCode\n#for reproducibility\nsi &lt;- sessioninfo::session_info()\nsi$packages$library &lt;- NULL\nsi$platform$pandoc &lt;- NULL\nsi\n#&gt; ─ Session info ───────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.4.1 (2024-06-14 ucrt)\n#&gt;  os       Windows 10 x64 (build 19045)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  English_United States.utf8\n#&gt;  ctype    English_United States.utf8\n#&gt;  tz       America/Denver\n#&gt;  date     2024-07-19\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────\n#&gt;  package     * version date (UTC) lib source\n#&gt;  charlatan   * 0.5.1   2023-09-13 []  CRAN (R 4.4.1)\n#&gt;  cli           3.6.3   2024-06-21 []  CRAN (R 4.4.1)\n#&gt;  colorspace    2.1-0   2023-01-23 []  CRAN (R 4.4.1)\n#&gt;  digest        0.6.36  2024-06-23 []  CRAN (R 4.4.1)\n#&gt;  dplyr       * 1.1.4   2023-11-17 []  CRAN (R 4.4.1)\n#&gt;  evaluate      0.24.0  2024-06-10 []  CRAN (R 4.4.1)\n#&gt;  fansi         1.0.6   2023-12-08 []  CRAN (R 4.4.1)\n#&gt;  farver        2.1.2   2024-05-13 []  CRAN (R 4.4.1)\n#&gt;  fastmap       1.2.0   2024-05-15 []  CRAN (R 4.4.1)\n#&gt;  generics      0.1.3   2022-07-05 []  CRAN (R 4.4.1)\n#&gt;  ggplot2     * 3.5.1   2024-04-23 []  CRAN (R 4.4.1)\n#&gt;  ggrepel     * 0.9.5   2024-01-10 []  CRAN (R 4.4.1)\n#&gt;  glue          1.7.0   2024-01-09 []  CRAN (R 4.4.1)\n#&gt;  gtable        0.3.5   2024-04-22 []  CRAN (R 4.4.1)\n#&gt;  highr         0.11    2024-05-26 []  CRAN (R 4.4.1)\n#&gt;  htmltools     0.5.8.1 2024-04-04 []  CRAN (R 4.4.1)\n#&gt;  jsonlite      1.8.8   2023-12-04 []  CRAN (R 4.4.1)\n#&gt;  knitr       * 1.48    2024-07-07 []  CRAN (R 4.4.1)\n#&gt;  labeling      0.4.3   2023-08-29 []  CRAN (R 4.4.0)\n#&gt;  lifecycle     1.0.4   2023-11-07 []  CRAN (R 4.4.1)\n#&gt;  lubridate   * 1.9.3   2023-09-27 []  CRAN (R 4.4.1)\n#&gt;  magrittr      2.0.3   2022-03-30 []  CRAN (R 4.4.1)\n#&gt;  munsell       0.5.1   2024-04-01 []  CRAN (R 4.4.1)\n#&gt;  pillar        1.9.0   2023-03-22 []  CRAN (R 4.4.1)\n#&gt;  pkgconfig     2.0.3   2019-09-22 []  CRAN (R 4.4.1)\n#&gt;  purrr         1.0.2   2023-08-10 []  CRAN (R 4.4.1)\n#&gt;  R6            2.5.1   2021-08-19 []  CRAN (R 4.4.1)\n#&gt;  Rcpp          1.0.13  2024-07-17 []  CRAN (R 4.4.1)\n#&gt;  rlang         1.1.4   2024-06-04 []  CRAN (R 4.4.1)\n#&gt;  rmarkdown     2.27    2024-05-17 []  CRAN (R 4.4.1)\n#&gt;  scales        1.3.0   2023-11-28 []  CRAN (R 4.4.1)\n#&gt;  sessioninfo   1.2.2   2021-12-06 []  CRAN (R 4.4.1)\n#&gt;  tibble        3.2.1   2023-03-20 []  CRAN (R 4.4.1)\n#&gt;  tidyr       * 1.3.1   2024-01-24 []  CRAN (R 4.4.1)\n#&gt;  tidyselect    1.2.1   2024-03-11 []  CRAN (R 4.4.1)\n#&gt;  timechange    0.3.0   2024-01-18 []  CRAN (R 4.4.1)\n#&gt;  utf8          1.2.4   2023-10-22 []  CRAN (R 4.4.1)\n#&gt;  vctrs         0.6.5   2023-12-01 []  CRAN (R 4.4.1)\n#&gt;  whisker       0.4.1   2022-12-05 []  CRAN (R 4.4.1)\n#&gt;  withr         3.0.0   2024-01-16 []  CRAN (R 4.4.1)\n#&gt;  xfun          0.46    2024-07-18 []  CRAN (R 4.4.1)\n#&gt;  yaml          2.3.9   2024-07-05 []  CRAN (R 4.4.1)\n#&gt; \n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Advancing Data in Corrections: Virtual Academy Case Study</span>"
    ]
  }
]