[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Summer Conference Case Study",
    "section": "",
    "text": "Welcome\nAs part of an ongoing staffing crisis, you have been asked by your director to reproduce a report that was produced under the last research director, who is now on a beach, enjoying her retirement, and unreachable. You asked your only analyst to try to reproduce the report, but they have not yet been able to, and there doesn’t seem to be any record of how the numbers were produced. The report establishes recidivism rates for several key programs and provides staffing levels for those programs. Your director wants to make the case that the DOC needs staff to implement successful programs. This is in response to a group of hostile legislators (a mix of far-right fiscal conservatives who do not believe in prison programs and far-left “de-funders” who think your budget is too big). They are running a bill to reduce your overall budget and eliminate some existing staff vacancies, with the argument that if you have survived for the past two years with your current staffing levels, you must be doing okay.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "index.html#case-study-narrative",
    "href": "index.html#case-study-narrative",
    "title": "Summer Conference Case Study",
    "section": "Case Study Narrative",
    "text": "Case Study Narrative\n\nGDOC Recidivism Analysis\nAmidst a swirling staffing crisis at the Gotham Department of Corrections (GDOC), you find yourself in a peculiar predicament. Your director, the fearsome Evelyn “Firebrand” Summers, has thrust upon you the Herculean task of resurrecting a report forged under the previous Research Director Miranda “Mermaid” Shelsky. Dr. Shelsky, now retired and sipping mojitos on a secluded beach in Fiji, left behind a report detailing recidivism rates and the indispensable staffing needs for DOC’s prized programs.\nThe report establishes recidivism rates for several key supervision/reentry programs for high risk people and provides staffing levels for these programs. Director Summers is depending on you to build a case to keep the necessary staff to implement these programs successfully.\nYou ask your only analyst to try to reproduce the report, yet there mysteriously doesn’t seem to be any record of how the original report’s numbers were produced. Your analyst has spent 3 days and cannot seem to figure out the formula. The analyst is also now 3 days behind on other tasks that have been assigned and it is time to move on.\nMeanwhile, the ever-persistent Center Wing Coalition (CWC) are crafting a bill to counteract all of the progress your agency has been making in your recidivism-reduction efforts. The CWC argue that, if your agency has survived for the past two years with current staffing levels, you must be doing okay and are advocating to cut your overall allocated FTE. Meanwhile, your staff is working overtime through lunch, and you are certain you saw at least two team members browsing on Indeed last week.\nYou’re in a tight bind, and time is ticking. Not to mention, your best friend has planned a getaway next month in Las Vegas. You paid for this trip over six months ago and you have no intention of missing it. However, you have no desire to be sitting in the Blue Man Group show thinking about this data…",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "index.html#about-virtual-academy",
    "href": "index.html#about-virtual-academy",
    "title": "Summer Conference Case Study",
    "section": "About Virtual Academy",
    "text": "About Virtual Academy\nThe Advancing Data in Corrections initiative includes a Virtual Academy, which builds data literacy and analytic capabilities within departments of corrections nationwide to further data-informed planning and decision-making. Through their participation in the Virtual Academy, corrections agency staff can access the program’s self-paced learning materials, community forum, peer-to-peer networks, and technical assistance at no cost.\nFor more information about the program and the tools, services, and opportunities available, visit the Virtual Academy website.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "va_cs.html",
    "href": "va_cs.html",
    "title": "GDOC Recidivism Analysis",
    "section": "",
    "text": "Introduction\nOur DOC captures 10 Evidence Based Recidivism Reduction (EBRR) programs in 2021 listed by the Federal Bureau of Prisons and the individuals involved:\nYour DOC Research Department tracks clients served and staff involved in running and supporting these programs.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>GDOC Recidivism Analysis</span>"
    ]
  },
  {
    "objectID": "va_cs.html#introduction",
    "href": "va_cs.html#introduction",
    "title": "GDOC Recidivism Analysis",
    "section": "",
    "text": "Anger Management\nThe Bureau Rehabilitation and Values Enhancement Program\nBasic Cognitive Skills\nThe Resolve Program\nResidential Drug Abuse Program\nDialectical Behavior Therapy\nSex Offender Treatment Program\nChallenge Program\nMental Health Step Down Program\nSteps Toward Awareness, Growth, and Emotional Strength Program",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>GDOC Recidivism Analysis</span>"
    ]
  },
  {
    "objectID": "va_cs.html#data-exploration",
    "href": "va_cs.html#data-exploration",
    "title": "GDOC Recidivism Analysis",
    "section": "Data Exploration",
    "text": "Data Exploration\nLet’s take a look at our roster! The name of our data is roster. Let’s take a peek under the hood and see what variables/columns we have, and a quick summary of what they all look like. We know that our DOC has 10 programs.\n\n\nCode\n#what's in our data\nsummary(roster)\n#&gt;  client_names            age          datestart            programs        \n#&gt;  Length:55          Min.   :19.00   Min.   :1991-08-22   Length:55         \n#&gt;  Class :character   1st Qu.:25.00   1st Qu.:2021-09-14   Class :character  \n#&gt;  Mode  :character   Median :29.00   Median :2021-11-30   Mode  :character  \n#&gt;                     Mean   :28.71   Mean   :2021-01-05                     \n#&gt;                     3rd Qu.:32.00   3rd Qu.:2022-02-04                     \n#&gt;                     Max.   :41.00   Max.   :2022-07-09                     \n#&gt;       ret         \n#&gt;  Min.   :-1.0000  \n#&gt;  1st Qu.: 0.0000  \n#&gt;  Median : 0.0000  \n#&gt;  Mean   : 0.5091  \n#&gt;  3rd Qu.: 1.0000  \n#&gt;  Max.   :11.0000\nnumcol &lt;- ncol(roster)\nprint(numcol)\n#&gt; [1] 5\n\n\nInteresting! It appears we have 5 variables in the roster data! What else do we see going on here? Let’s just lift the hood a tiny bit more.\n\n\nCode\n#peek under the hood\nhead(roster)\n\n\n\n  \n\n\n\nFascinating! It looks like person-level data! Let’s learn more about some of the potentially relevant variables.\n\n\nCode\n#distribution of returns\nhist(roster$ret, breaks=20)\n\n\n\n\n\n\n\n\n\nCode\n\n#distribution of age\nhist(roster$age)\n\n\n\n\n\n\n\n\n\nCode\n\n#distribution of dates\nhist(roster$datestart, breaks=10)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>GDOC Recidivism Analysis</span>"
    ]
  },
  {
    "objectID": "va_cs.html#cleaning",
    "href": "va_cs.html#cleaning",
    "title": "GDOC Recidivism Analysis",
    "section": "Cleaning",
    "text": "Cleaning\n\nDuplicates\nWhat other pieces of information might be relevant to what we need to know about the data? How about since it appears to be person-level that we check to make sure that there aren’t any duplicates?\n\n\nCode\n#are there any duplicates?\nroster[duplicated(roster) | duplicated(roster, fromLast=TRUE),]\n\n\n\n  \n\n\n\nCode\n\n#how many duplicates?\ndupct &lt;- length(unique(\n  roster[duplicated(roster) | duplicated(roster, fromLast=TRUE),]\n  ))\nprint(dupct)\n#&gt; [1] 5\n\n\nWow! It looks like we have 5 duplicate observations/rows in our data! Let’s remove them and keep exploring!\n\n\nCode\n#deduplicate across all columns\nroster.nodup &lt;- roster[!duplicated(roster), ]\n\n#check for dups again\nroster.nodup[duplicated(roster.nodup) | duplicated(roster.nodup, fromLast=TRUE),]\n\n\n\n  \n\n\n\nAlright! No more duplicates! No let’s take a closer look at our 10 programs.\n\n\nCode\n#count total number of programs\nprgnum &lt;- n_distinct(roster.nodup$programs)\nprint(prgnum)\n#&gt; [1] 14\n\n\nHm - it looks like there are more than 10 programs; 14 programs to be exact. Let’s see what’s going on here.\n\n\nCode\n#list out the actual program names\nroster.nodup |&gt;\n  count(programs)\n\n\n\n  \n\n\n\n\n\nRecoding\nAh! It looks like there are some errors in your data across programs, ret, and datestart! Clean them up so you can accurately report all EBRR programs and their associated recidivism rates. We’ll probably have to make some assumptions on our data.\n\n\nCode\n\n#check out weird date values\nroster.nodup |&gt;\n  count(year(datestart))\n\n\n\n  \n\n\n\nCode\n\n#check out weird return values\nroster.nodup |&gt;\n  count(ret)\n\n\n\n  \n\n\n\nCode\n\n#clean program names\nroster.clean &lt;- roster.nodup |&gt;\n  #fix programs, dates, and returns\n  mutate(programs_clean = case_when(programs == \"bgs\" ~ \"bcs\",\n                                    programs == \"fbt\" ~ \"dbt\",\n                                    programs == \"brv\" ~ \"brave\",\n                                    programs == \"rdp\" ~ \"rdap\",\n                                    TRUE ~ programs),\n         \n         #dates - assume that wrong dates occurred in 2021\n         datestart      = case_when(year(datestart) &lt; 2021 ~ `year&lt;-`(datestart, 2021),\n                                    TRUE ~ datestart),\n         \n         #returns - assume that wrong returns should all be =1\n         ret            = case_when(ret == -1 ~ 1,\n                                    ret == 2  ~ 1,\n                                    ret == 11 ~ 1,\n                                    TRUE ~ ret)\n         )\n\n#check cleaned program names\nroster.clean |&gt;\n  count(programs_clean,programs)\n\n\n\n  \n\n\n\nCode\n\n#check date values\nroster.clean |&gt;\n  count(year(datestart))\n\n\n\n  \n\n\n\nCode\n\n#check out weird return values\nroster.clean |&gt;\n  count(ret)\n\n\n\n  \n\n\n\nMuch better! 10 programs as expected for our DOC, and cleaned dates and returns! Now let’s see what’s going on with this returns variable when cross-tabbed with our 10 programs.\n\n\nCode\n#recidivism by program count\nroster.clean |&gt;\n  count(programs_clean,ret)\n\n\n\n  \n\n\n\nLet’s calculate recidivism rates for all of our programs! It looks like we have data across two years from the datestart column, from 2021-05-08 to 2022-07-09, so perhaps we should calculate recidivism rates overall and by year!\n\n\nCode\n##create dataset of numerators and denominators\n#recidivism rates overall\nroster2.1 &lt;- roster.clean |&gt;\n  mutate(year = factor(year(datestart))) |&gt;\n  select(-c(client_names,age,programs)) |&gt;\n  group_by(programs_clean) |&gt;\n  count(ret) |&gt;\n  mutate(clients_served = sum(n),\n         recid_rate_all = case_when(ret == 1 ~ round(n/clients_served,2),\n                                ret == 0 ~ 0)\n         ) |&gt;\n  group_by(programs_clean) |&gt;\n  slice(n()) |&gt;\n  select(-c(ret, n)) |&gt;\n  rename(clients_served_all = clients_served)\n#print out recidivism rates overall years\nroster2.1 |&gt;\n  select(programs_clean,recid_rate_all) |&gt;\n  kable(format=\"html\")\n\n\n\n\n\nprograms_clean\nrecid_rate_all\n\n\n\n\nam\n1.00\n\n\nbcs\n0.27\n\n\nbrave\n0.17\n\n\nchallenge\n0.67\n\n\ndbt\n0.50\n\n\nmhsd\n0.00\n\n\nrdap\n0.43\n\n\nresolve\n0.29\n\n\nsotrt\n0.00\n\n\nstages\n0.75\n\n\n\n\n\n\n\nCode\n\n#recidivism rates by year\nroster2.2 &lt;- roster.clean |&gt;\n  mutate(year = factor(year(datestart))) |&gt;\n  select(-c(client_names,age,programs)) |&gt;\n  group_by(programs_clean,year) |&gt;\n  count(ret,year) |&gt;\n  mutate(clients_served = sum(n),\n         recid_rate_year= case_when(ret == 1 ~ round(n/clients_served,2),\n                                ret == 0 ~ 0)\n         ) |&gt;\n  group_by(programs_clean,year) |&gt;\n  slice(n()) |&gt;\n  select(-c(ret, n)) |&gt;\n  rename(clients_served_year = clients_served)\n#print out recidivism rates by year\nroster2.2 |&gt;\n  arrange(year,programs_clean) |&gt;\n  select(year,programs_clean,recid_rate_year) |&gt;\n  kable(format=\"html\")\n\n\n\n\n\nyear\nprograms_clean\nrecid_rate_year\n\n\n\n\n2021\nbcs\n0.29\n\n\n2021\nbrave\n0.33\n\n\n2021\nchallenge\n0.50\n\n\n2021\ndbt\n0.00\n\n\n2021\nmhsd\n0.00\n\n\n2021\nrdap\n0.40\n\n\n2021\nresolve\n0.50\n\n\n2021\nsotrt\n0.00\n\n\n2021\nstages\n1.00\n\n\n2022\nam\n1.00\n\n\n2022\nbcs\n0.25\n\n\n2022\nbrave\n0.00\n\n\n2022\nchallenge\n1.00\n\n\n2022\ndbt\n0.60\n\n\n2022\nrdap\n0.50\n\n\n2022\nresolve\n0.00\n\n\n2022\nstages\n0.50\n\n\n\n\n\n\n\nCode\n\n#combine data by programs to capture recidivism rates overall and by year\nroster2 &lt;- inner_join(roster2.1, roster2.2, by = \"programs_clean\")\n#verify that join did not lose any observations\nanti_join(roster2.1, roster2.2, by = \"programs_clean\")\n\n\n\n  \n\n\n\nLet’s take a look at our program staffing! Our DOC captures 10 Evidence Based Recidivism Reduction (EBRR) programs listed by the Federal Bureau of Prisons and the individuals involved.The name of our data is staff.\n\n\nCode\n#what's in our data\nsummary(staff)\n#&gt;     staff               prg           \n#&gt;  Length:80          Length:80         \n#&gt;  Class :character   Class :character  \n#&gt;  Mode  :character   Mode  :character\n\nnumcolst &lt;- ncol(staff)\nprint(numcolst)\n#&gt; [1] 2\n\n\nIt appears we only have 2 variables in the program staffing data. Let’s keep exploring!\n\n\nCode\n#take a peek\nhead(staff)\n\n\n\n  \n\n\n\nWell, well, well - person-level data again! Why don’t we check for duplicates just in case?\n\n\nCode\n#are there any duplicates?\nstaff[duplicated(staff) | duplicated(staff, fromLast=TRUE),]\n\n\n\n  \n\n\n\nPhew! No duplicates. That was a close one. Now let’s take a closer look at our 10 programs covered by these staff.\n\n\nCode\n#count total number of programs\nprgnum.stf &lt;- n_distinct(staff$prg)\nprint(prgnum.stf)\n#&gt; [1] 13\n\n\nWell - it looks like yet again we have data with more than 10 programs; 13 to be exact. Let’s see what’s going on here.\n\n\nCode\n#list out the actual program names\nstaff |&gt;\n  count(prg)\n\n\n\n  \n\n\n\nIt looks like there are some errors in your data (again!?)! Clean them up so you can accurately report all EBRR programs and their associated program staff.\n\n\nCode\n#clean program names\nstaff.clean &lt;- staff |&gt;\n  mutate(programs_clean = case_when(prg == \"resol\" ~ \"resolve\",\n                                    prg == \"brv\" ~ \"brave\",\n                                    prg == \"stg\" ~ \"stages\",\n                                    TRUE ~ prg))\n\n#check cleaned program names\nstaff.clean |&gt;\n  count(programs_clean,prg)\n\n\n\n  \n\n\n\nMuch better! Now let’s see how many staff we have by program!\n\n\nCode\n#create dataset of staff counts\nstaff2 &lt;- staff.clean |&gt;\n  select(-c(staff,prg)) |&gt;\n  count(programs_clean) |&gt;\n  rename(num_staff = n)\n\n#print staffing\nprint(staff2)\n#&gt;    programs_clean num_staff\n#&gt; 1              am         2\n#&gt; 2             bcs         4\n#&gt; 3           brave         8\n#&gt; 4       challenge         4\n#&gt; 5             dbt        15\n#&gt; 6            mhsd         6\n#&gt; 7            rdap         5\n#&gt; 8         resolve         8\n#&gt; 9           sotrt        11\n#&gt; 10         stages        17\n\n#histogram of staffing\nhist(staff2$num_staff)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>GDOC Recidivism Analysis</span>"
    ]
  },
  {
    "objectID": "va_cs.html#reporting-results",
    "href": "va_cs.html#reporting-results",
    "title": "GDOC Recidivism Analysis",
    "section": "Reporting Results",
    "text": "Reporting Results\n\nData Visualizations\nWe have to get out those results now! Let’s combine the program staff and recidivism rates dataframes so we can print out a table!\n\n\nCode\ntabout &lt;- inner_join(roster2, staff2, by = (\"programs_clean\")) |&gt;\n  select(-c(clients_served_all, clients_served_year)) |&gt;\n  ungroup() |&gt;\n  #if any years are missing, fill in\n  complete(year, nesting(programs_clean,num_staff),\n           fill = list(recid_rate_all = NA, recid_rate_year = NA)\n  ) |&gt;\n  #correct missing values for recid_rate_all since this is the overall recidivism rate across multiple years\n  group_by(programs_clean) |&gt;\n  fill(recid_rate_all, .direction = \"updown\")\n#verify join was successful\nanti_join(roster2, staff2, by = (\"programs_clean\"))\n\n\n\n  \n\n\n\nCode\n\n#overall recidivism rates\ntabout |&gt; \n  filter(year==date1) |&gt;\n  select(-c(year, recid_rate_year)) |&gt;\n  kable(format = \"html\", caption = \"Overall recidivism rates by program\")\n\n\n\nOverall recidivism rates by program\n\n\nprograms_clean\nnum_staff\nrecid_rate_all\n\n\n\n\nam\n2\n1.00\n\n\nbcs\n4\n0.27\n\n\nbrave\n8\n0.17\n\n\nchallenge\n4\n0.67\n\n\ndbt\n15\n0.50\n\n\nmhsd\n6\n0.00\n\n\nrdap\n5\n0.43\n\n\nresolve\n8\n0.29\n\n\nsotrt\n11\n0.00\n\n\nstages\n17\n0.75\n\n\n\n\n\n\n\nCode\n\n#overall recidivism rates\ntabout |&gt; \n  select(-c(recid_rate_all)) |&gt;\n  kable(format = \"html\", caption = \"Recidivism rates by program by year\")\n\n\n\nRecidivism rates by program by year\n\n\nyear\nprograms_clean\nnum_staff\nrecid_rate_year\n\n\n\n\n2021\nam\n2\nNA\n\n\n2021\nbcs\n4\n0.29\n\n\n2021\nbrave\n8\n0.33\n\n\n2021\nchallenge\n4\n0.50\n\n\n2021\ndbt\n15\n0.00\n\n\n2021\nmhsd\n6\n0.00\n\n\n2021\nrdap\n5\n0.40\n\n\n2021\nresolve\n8\n0.50\n\n\n2021\nsotrt\n11\n0.00\n\n\n2021\nstages\n17\n1.00\n\n\n2022\nam\n2\n1.00\n\n\n2022\nbcs\n4\n0.25\n\n\n2022\nbrave\n8\n0.00\n\n\n2022\nchallenge\n4\n1.00\n\n\n2022\ndbt\n15\n0.60\n\n\n2022\nmhsd\n6\nNA\n\n\n2022\nrdap\n5\n0.50\n\n\n2022\nresolve\n8\n0.00\n\n\n2022\nsotrt\n11\nNA\n\n\n2022\nstages\n17\n0.50\n\n\n\n\n\n\n\nBut what if we want a nice data visualization of it all?\n\n\nCode\n#basic bar chart of overall recidivism rate by program\nggplot(tabout |&gt;\n         filter(year == date1)\n       ,aes(x=programs_clean, y=recid_rate_all)) +\n  geom_bar(stat=\"identity\")\n\n\n\n\n\n\n\n\n\nCode\n\n#basic bar chart of recidivism rate by year by program\nggplot(tabout,aes(x=programs_clean, y=recid_rate_year,fill=year)) +\n         geom_bar(position=\"dodge\", stat=\"identity\")\n\n\n\n\n\n\n\n\n\nNicer!!!\n\n\nCode\n#build bar chart of recidivism rates across programs\n#information to plot, pick dates\ndates &lt;- as.numeric(c(date1,date2)) #what years of data do you want to plot?\n\n#custom title header of plot\ntitledates &lt;- ifelse(length(dates)&gt;=2 & date1 != date2, paste0(date1,\" - \",date2),\n                     ifelse((dates==date1 | dates==date2) & ALL.BY, as.character(dates),\n                            ifelse(!ALL.BY, date1, \"\")))\n\n#which years/programs are missing data?\nprg.NA &lt;- tabout |&gt; \n  filter(is.na(recid_rate_year)) |&gt;\n  pull(programs_clean)\n\n#plot it! this will plot recidivism rates with overlaid staffing text\nrr &lt;- ggplot(tabout |&gt; \n               filter(if(ALL.BY) year %in% dates else year == date2) |&gt;\n               mutate(recid_rate = case_when(ALL.BY  ~ recid_rate_year,\n                                             !ALL.BY ~ recid_rate_all))\n             ,aes(x=programs_clean, y=recid_rate, fill=year)) +\n  geom_bar(position = \"dodge\",stat = \"identity\") +\n  geom_text(aes(label=ifelse(year==dates[2],paste(num_staff,\"staff\"),\"\")), vjust=-0.3, color = staffc) +\n  scale_fill_manual(values=c(date1c,date2c)) +\n  ylim(0,1) +\n  ylab(\"Recidivism Rate\") +\n  xlab(\"EBBR Programs\") +\n  ggtitle(paste0(\"Recidivism Rates across EBBR programs\\n\",titledates)) +\n  theme_classic() +\n  #remove legend if plotting overall (not by year)\n  {if(!ALL.BY) theme(legend.position=\"none\")}+\n  #only print caption if a program is missing data\n  {if(length(prg.NA)!=0) labs(caption = capture.output(cat(\"The following programs were missing data in some years:\", unique(toupper(prg.NA)), sep=\" \")))}+\n  theme(plot.caption=element_text(hjust=0))\n\n#display\nrr\n\n\n\n\n\n\n\n\n\n\n\nCWC Damned Lies and Statistics\nOh no!! The Center Wing Coaltion advocacy group just published a report that EBBR programs’ recidivism rates are at an all time high of 67% with a report that claims to have used your DOC’s reported data on EBBR program recidivism rates! Find out what’s going on, and fast!\n\n\nCode\n#manage the data to produce recidivism rates\ntabout2 &lt;- inner_join(roster2, staff2, by = (\"programs_clean\")) |&gt;\n  ungroup() |&gt;\n  #if any years are missing, fill in\n  complete(year, nesting(programs_clean,num_staff),\n           fill = list(recid_rate_all = NA, recid_rate_year = NA)\n  ) |&gt;\n  #correct missing values for recid_rate_all since this is the overall recidivism rate across multiple years\n  group_by(programs_clean) |&gt;\n  fill(c(recid_rate_all,clients_served_all), .direction = \"updown\")\n#verify join was successful\nanti_join(roster2, staff2, by = (\"programs_clean\"))\n\n\n\n  \n\n\n\nCode\n\n#calculate average recidivism rate across programs from all years\nunw.a &lt;- round(mean(tabout2$recid_rate_all,na.rm=TRUE),2)\nprint(paste0(unw.a*100,\"%\"))\n#&gt; [1] \"41%\"\n\n#calculate average recidivism rate across programs from year 1\nunw.d1 &lt;- round(mean(tabout2[which(tabout2$year==date1),]$recid_rate_year,na.rm=TRUE),2)\nprint(paste0(unw.d1*100,\"%\"))\n#&gt; [1] \"34%\"\n\n#calculate average recidivism rate across programs from year 2\nunw.d2 &lt;- round(mean(tabout2[which(tabout2$year==date2),]$recid_rate_year,na.rm=TRUE),2)\nprint(paste0(unw.d2*100,\"%\"))\n#&gt; [1] \"48%\"\n\n\nWell a recidivism rate of 41% is much better, but it still doesn’t match what the advocacy group is reporting! Keep investigating!\n\n\nCode\n#programs to remove\nrm.pgms &lt;- c(\"bcs\", \"brave\", \"sotrt\", \"mhsd\", \"resolve\")\n\n\n\n\nCode\n#remove 5 of the 10 programs because the advocacy group was sneaky\nadv &lt;- tabout |&gt;\n  filter(!(programs_clean %in% rm.pgms) &\n             year == date1) #dates repeat the same information, so just pick one date to average over\n#calculate ADVOCACY rate, which will be inserted into document text\nadv_rate &lt;- round(mean(adv$recid_rate_all,na.rm=TRUE)*100,1)\nprint(adv_rate)\n#&gt; [1] 67\n\n\n\n\nData-Informed Reporting\nAlright! There’s the number the advocacy group reported! But what’s missing?\n\n\nCode\n#manage the data to produce recidivism rates\n#total clients served (all years)\ntotal.a &lt;- sum(tabout2[which(tabout2$year==date1),]$clients_served_all, na.rm=TRUE)\ntabout2.wgt &lt;- tabout2 |&gt;\n  filter(year==date1) |&gt;\n  mutate(recid_rate_all_w = clients_served_all*recid_rate_all)\nw.a &lt;- round(sum(tabout2.wgt$recid_rate_all_w)/total.a,2)\nprint(paste0(w.a*100,\"%\"))\n#&gt; [1] \"36%\"\n\n#total clients served (all years), JUST 5 PROGRAMS!!!\ntotal.a5 &lt;- sum(tabout2[which(tabout2$year==date1 & !tabout2$programs_clean %in% rm.pgms),]$clients_served_all, na.rm=TRUE)\ntabout2.wgt5 &lt;- tabout2 |&gt;\n  filter(!(programs_clean %in% rm.pgms) & year==date1) |&gt;\n  mutate(recid_rate_all_w = clients_served_all*recid_rate_all)\nw.a5 &lt;- round(sum(tabout2.wgt5$recid_rate_all_w)/total.a5,2)\nprint(paste0(w.a5*100,\"%\"))\n#&gt; [1] \"57%\"\n\n\nAlright! If we just weight our data then we see that the average overall recidivism rate across the five programs that the advocacy group highlighted is only 57%. Great work!\nNow let’s report it through some fancy data visualization work.\n\n\nCode\n#which weights to plot\nw   &lt;- if(ALL.BY) c(w.d1,w.d2) else w.a\nunw &lt;- if(ALL.BY) c(unw.d1,unw.d2) else unw.a\n\n#for positioning\nlast &lt;- tail(tabout$programs_clean,n=1)\n\n#add recidivism weight averages to plot\nrr + geom_hline(yintercept=w[1], linetype = \"dashed\", color = hlinew1, size = 1) +\n  {if(ALL.BY) geom_hline(yintercept=w[2], linetype = \"dashed\", color = hlinew1, size = 1)}+\n  geom_hline(yintercept=unw[1], linetype = \"dashed\", color = hlinew2, size = 1) +\n  {if(ALL.BY) geom_hline(yintercept=unw[2], linetype = \"dashed\", color = hlinew2, size = 1)}+\n  geom_label_repel(aes(label=lab, y=0.25), fill=hlinew1,\n             data = tabout |&gt;\n               filter(if(ALL.BY) year %in% dates else year == date2) |&gt;\n               mutate(recid_rate = case_when( ALL.BY  ~ recid_rate_year,\n                                             !ALL.BY ~ recid_rate_all),\n                      lab        = case_when( ALL.BY &  date1 != date2 ~ paste0(date1,\" Weighted avg: \",w[1],\"\\n\",date2,\" Weighted avg: \",w[2]),\n                                             !ALL.BY &  date1 != date2 ~ paste0(date1,\"-\",date2,\"\\nWeighted avg: \",w[1]),\n                                              ALL.BY &  date1 == date2 ~ paste0(date1,\"\\nWeighted avg: \",w[1]))) |&gt;\n               filter(programs_clean == last & year == date2),\n             nudge_x = -4,\n             min.segment.length = Inf) + \n  geom_label_repel(aes(label=lab, y=0.5), fill=hlinew2,\n             data = tabout |&gt;\n               filter(if(ALL.BY) year %in% dates else year == date2) |&gt;\n               mutate(recid_rate = case_when( ALL.BY  ~ recid_rate_year,\n                                             !ALL.BY ~ recid_rate_all),\n                      lab        = case_when( ALL.BY &  date1 != date2 ~ paste0(date1,\" Unweighted avg: \",unw[1],\"\\n\",date2,\" Unweighted avg: \",unw[2]),\n                                             !ALL.BY &  date1 != date2 ~ paste0(date1,\"-\",date2,\"\\nUnweighted avg: \",unw[1]),\n                                              ALL.BY &  date1 == date2 ~ paste0(date1,\"\\nUnweighted avg: \",unw[1]))) |&gt;\n               filter(programs_clean == last & year == date2),\n             nudge_x = -8,\n             min.segment.length = Inf\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>GDOC Recidivism Analysis</span>"
    ]
  },
  {
    "objectID": "va_cs.html#more-cool-data-viz",
    "href": "va_cs.html#more-cool-data-viz",
    "title": "GDOC Recidivism Analysis",
    "section": "More Cool Data Viz!",
    "text": "More Cool Data Viz!\nLet’s prepare our data to do some really fun data viz!\n\n\nCode\n#this code will run if plotting data for multiple years, otherwise nothing will be produced (i.e., ALL.BY &lt;- T)\n\n#manipulate data for plotting\ntabout.date1 &lt;- tabout |&gt;\n  filter(year==date1) |&gt;\n  select(c(recid_rate_year, programs_clean, recid_rate_all)) |&gt;\n  rename(recid_rate_date1 = recid_rate_year)\ntabout.date2 &lt;- tabout |&gt;\n  filter(year==date2) |&gt;\n  select(c(recid_rate_year, programs_clean)) |&gt;\n  rename(recid_rate_date2 = recid_rate_year)\ntabout.dates &lt;- inner_join(tabout.date1, tabout.date2, by = \"programs_clean\") |&gt;\n  select(programs_clean, recid_rate_date1, recid_rate_date2, recid_rate_all)\n\nhead(tabout.dates)\n\n\n\n  \n\n\n\n\nPlotting Overall\nWhat are some more engaging ways we can plot recidivism rates for leadership and our stakeholders overall for these programs?\n\n\nCode\n#make some really cool horizontal floating dot charts!\n#overwrite value of rates to overall if ALL.BY\n{if(!ALL.BY) tabout.dates$recid_rate_date1 &lt;- tabout.dates$recid_rate_all}\n\n#plot two years or one year depending on ALL.BY setting\n{if(ALL.BY) plotit &lt;- c(tabout.dates[which(tabout.dates$programs_clean==\"stages\"),]$recid_rate_date1, tabout.dates[which(tabout.dates$programs_clean==\"stages\"),]$recid_rate_date2) else plotit &lt;- tabout.dates[which(tabout.dates$programs_clean==\"stages\"),]$recid_rate_date1}\n\n#remove label legend if by year\n{if(ALL.BY) titledates2 &lt;- c(as.factor(date1),as.factor(date2)) else titledates2 &lt;- \"\"}\n\n#plot!\ngg_dot &lt;- tabout.dates |&gt;\n  # rearrange the factor levels for programs by rates for date1\n  arrange(recid_rate_date1) |&gt;\n  mutate(discipline = fct_inorder(programs_clean)) |&gt;\n  \n  ggplot() +\n  # remove axes and superfluous grids\n  theme_classic() +\n  theme(axis.title = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.line = element_blank()) +\n  \n  # add a dummy point for scaling purposes\n  geom_point(aes(x = 0.7, y = programs_clean), \n             size = 0, col = \"white\") + \n  \n  # add the horizontal programs_clean lines\n  geom_hline(yintercept = 1:length(tabout.dates$programs_clean), col = \"grey80\") +\n  \n  # add a point for each date1 recidivism rate\n  geom_point(aes(x = recid_rate_date1, y = programs_clean), \n             size = 11, col = date1c) +\n\n  # add a point for each date2 recidivism rate\n {if(ALL.BY) geom_point(aes(x = recid_rate_date2, y = programs_clean),size = 11, col = date2c)} + \n\n  # round each date2 recidivism rate\n  {if(ALL.BY) geom_text(aes(x = recid_rate_date2, y = programs_clean, label = paste0(round(recid_rate_date2, 2))), col = \"black\")} +\n\n  # round each date1 recidivism rate\n  geom_text(aes(x = recid_rate_date1, y = programs_clean, \n                label = paste0(round(recid_rate_date1, 2))),\n            col = \"white\") +\n\n  # add a label above the first two points\n  geom_text(aes(x = x, y = y, label = label, col = label),\n            data.frame(x     = plotit, \n                       y     = length(tabout.dates$programs_clean) + 1, \n                       label = titledates2), size = 6) +\n  scale_color_manual(values = c(date1c, date2c), guide = \"none\") +\n  \n  # manually specify the x-axis\n  scale_x_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1), \n                     labels = c(\"0\",\"0.25\", \"0.50\", \"0.75\", \"1\")) +\n  # manually set the spacing above and below the plot\n  scale_y_discrete(expand = c(0.2, 0)) \n\n#add titles/captions\ngg_dot + \n  {if (ALL.BY) ggtitle(\"Recidivism Rates across EBBR programs\\n\") else ggtitle(paste0(\"Recidivism Rates across EBBR programs\\n\",titledates))} +\n  #only print caption if a program is missing data\n  {if(length(prg.NA)!=0) labs(caption = capture.output(cat(\"The following programs were missing data in some years:\", unique(toupper(prg.NA)), sep=\" \")))}+\n  theme(plot.caption=element_text(hjust=0))\n\n\n\n\nCode\n##horizontal lollipop chart\nggplot(tabout, aes(x=programs_clean, y=recid_rate_all)) +\n  geom_segment( aes(x=programs_clean, xend=programs_clean, y=0, yend=recid_rate_all), color=date1c) +\n  geom_point( color=staffc, size=4, alpha=0.6) +\n  theme_light() +\n  coord_flip() +\n  xlab(\"EBBR Programs\") +\n  ylab(\"Recidivism Rate\") +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank()\n  ) + \n  ggtitle(paste0(\"Recidivism Rates across EBBR programs\\n\",titledates)) +\n  theme(plot.caption=element_text(hjust=0)) +\n  #only print caption if a program is missing data\n  {if(length(prg.NA)!=0) labs(caption = capture.output(cat(\"The following programs were missing data in some years:\", unique(toupper(prg.NA)), sep=\" \")))}\n\n\n\n\n\n\n\n\n\nCode\n\n##horizontal lollipop chart w/weighted average\nggplot(tabout, aes(x=programs_clean, y=recid_rate_all)) +\n  geom_segment(aes(x=programs_clean, xend=programs_clean, y=w.a, yend=recid_rate_all), color=date1c) +\n  geom_point(color=staffc, size=4, alpha=0.6) +\n  geom_hline(yintercept=w.a, linetype = \"dashed\", color = hlinew1, size = 1) +\n  geom_label(aes(label=paste0(\"Weighted avg: \",w.a), x=w.a, vjust = -10, hjust = 1.5), fill=hlinew1,\n                  data = tabout |&gt;\n               filter(programs_clean == last & year == date2)) +\n  theme_light() +\n  coord_flip() +\n  xlab(\"EBBR Programs\") +\n  ylab(\"Recidivism Rate\") +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.y = element_blank()\n  ) + \n  ggtitle(paste0(\"Recidivism Rates across EBBR programs\\n\",titledates)) +\n  #only print caption if a program is missing data\n  {if(length(prg.NA)!=0) labs(caption = capture.output(cat(\"The following programs were missing data in some years:\", unique(toupper(prg.NA)), sep=\" \")))}+\n  theme(plot.caption=element_text(hjust=0))\n\n\n\n\n\n\n\n\n\n\n\nPlotting by Year\nWhat about displaying these rates by year?\n\n\nCode\n#make some really cool horizontal floating dot charts!\n#overwrite value of rates to overall if ALL.BY\n{if(!ALL.BY) tabout.dates$recid_rate_date1 &lt;- tabout.dates$recid_rate_all}\n\n#plot two years or one year depending on ALL.BY setting\n{if(ALL.BY) plotit &lt;- c(tabout.dates[which(tabout.dates$programs_clean==\"stages\"),]$recid_rate_date1, tabout.dates[which(tabout.dates$programs_clean==\"stages\"),]$recid_rate_date2) else plotit &lt;- tabout.dates[which(tabout.dates$programs_clean==\"stages\"),]$recid_rate_date1}\n\n#remove label legend if by year\n{if(ALL.BY) titledates2 &lt;- c(as.factor(date1),as.factor(date2)) else titledates2 &lt;- \"\"}\n\n#plot!\ngg_dot &lt;- tabout.dates |&gt;\n  # rearrange the factor levels for programs by rates for date1\n  arrange(recid_rate_date1) |&gt;\n  mutate(discipline = fct_inorder(programs_clean)) |&gt;\n  \n  ggplot() +\n  # remove axes and superfluous grids\n  theme_classic() +\n  theme(axis.title = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.line = element_blank()) +\n  \n  # add a dummy point for scaling purposes\n  geom_point(aes(x = 0.7, y = programs_clean), \n             size = 0, col = \"white\") + \n  \n  # add the horizontal programs_clean lines\n  geom_hline(yintercept = 1:length(tabout.dates$programs_clean), col = \"grey80\") +\n  \n  # add a point for each date1 recidivism rate\n  geom_point(aes(x = recid_rate_date1, y = programs_clean), \n             size = 11, col = date1c) +\n\n  # add a point for each date2 recidivism rate\n {if(ALL.BY) geom_point(aes(x = recid_rate_date2, y = programs_clean),size = 11, col = date2c)} + \n\n  # round each date2 recidivism rate\n  {if(ALL.BY) geom_text(aes(x = recid_rate_date2, y = programs_clean, label = paste0(round(recid_rate_date2, 2))), col = \"black\")} +\n\n  # round each date1 recidivism rate\n  geom_text(aes(x = recid_rate_date1, y = programs_clean, \n                label = paste0(round(recid_rate_date1, 2))),\n            col = \"white\") +\n\n  # add a label above the first two points\n  geom_text(aes(x = x, y = y, label = label, col = label),\n            data.frame(x     = plotit, \n                       y     = length(tabout.dates$programs_clean) + 1, \n                       label = titledates2), size = 6) +\n  scale_color_manual(values = c(date1c, date2c), guide = \"none\") +\n  \n  # manually specify the x-axis\n  scale_x_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1), \n                     labels = c(\"0\",\"0.25\", \"0.50\", \"0.75\", \"1\")) +\n  # manually set the spacing above and below the plot\n  scale_y_discrete(expand = c(0.2, 0)) \n\n#add titles/captions\ngg_dot + \n  {if (ALL.BY) ggtitle(\"Recidivism Rates across EBBR programs\\n\") else ggtitle(paste0(\"Recidivism Rates across EBBR programs\\n\",titledates))} +\n  #only print caption if a program is missing data\n  {if(length(prg.NA)!=0) labs(caption = capture.output(cat(\"The following programs were missing data in some years:\", unique(toupper(prg.NA)), sep=\" \")))}+\n  theme(plot.caption=element_text(hjust=0))\n#&gt; Warning: Removed 1 row containing missing values or values outside the scale range\n#&gt; (`geom_point()`).\n#&gt; Warning: Removed 2 rows containing missing values or values outside the scale range\n#&gt; (`geom_point()`).\n#&gt; Warning: Removed 2 rows containing missing values or values outside the scale range\n#&gt; (`geom_text()`).\n#&gt; Warning: Removed 1 row containing missing values or values outside the scale range\n#&gt; (`geom_text()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\n#plot!\ngg_line &lt;- tabout.dates |&gt;\n  # add a variable for when rates are higher in date1 than in date2 (for colours)\n  mutate(date1high = recid_rate_date1 &gt; recid_rate_date2) |&gt;\n  ggplot() +\n  # add a line segment that goes from date1 to date2 for each program\n  geom_segment(aes(x     = 1,                xend = 2, \n                   y     = recid_rate_date1, yend = recid_rate_date2,\n                   group = programs_clean,\n                   col = date1high), \n               size = 1.2) +\n  # set the colors\n  scale_color_manual(values = c(date1c, date2c), guide = \"none\")  +\n  # remove all axis stuff\n  theme_classic() + \n  theme(axis.line  = element_blank(),\n        axis.text  = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank()) +\n  # add vertical lines that act as axis for date1\n  geom_segment(x    = 1, \n               xend = 1, \n               y    = min(tabout.dates$recid_rate_date1, na.rm=T) - 0.1,\n               yend = max(tabout.dates$recid_rate_date1, na.rm=T) + 0.125,\n               col  = \"grey70\", size = 0.5) +\n  # add vertical lines that act as axis for date2\n  geom_segment(x    = 2, \n               xend = 2, \n               y    = min(tabout.dates$recid_rate_date1, na.rm=T) - 0.1,\n               yend = max(tabout.dates$recid_rate_date1, na.rm=T) + 0.125,\n               col  = \"grey70\", size = 0.5) +\n  # add the labels above their axes\n  geom_text(aes(x = x, y = y, label = label),\n            data = data.frame(x = 1:2, \n                              y = max(tabout.dates$recid_rate_date2, na.rm=T) + 0.05,\n                              label = c(date1, date2)),\n            col = \"grey30\",\n            size = 6)  +\n  # add the label and rate for each program next the date1 axis\n  geom_text_repel(aes(x     = 1 - 0.03, \n                      y     = recid_rate_date1, \n                      label = paste0(programs_clean, \", \", round(recid_rate_date1, 2))),\n             force_pull   = 0,\n             nudge_y      = 0.05, nudge_x = -0.075,\n             direction    = \"y\",\n             hjust        = 1,\n             segment.size = 0.2,\n             max.iter = 1e4, max.time = 1) +\n  # add the rate next to each point on the date2 axis\n  geom_text(aes(x = 2 + 0.08, \n                y = recid_rate_date2, \n                label = paste0(round(recid_rate_date2, 2))),\n            col = \"grey30\") +\n  # set the limits of the x-axis so that the labels are not cut off\n  scale_x_continuous(limits = c(0.5, 2.1)) + \n  \n  # add the white outline for the points at each rate for date1\n  geom_point(aes(x = 1, \n                 y = recid_rate_date1), size = 4.5,\n             col = \"white\") +\n  # add the white outline for the points at each rate for date2\n  geom_point(aes(x = 2, \n                 y = recid_rate_date2), size = 4.5,\n             col = \"white\") +\n  \n  # add the actual points at each rate for date1\n  geom_point(aes(x = 1, \n                 y = recid_rate_date1), size = 4,\n             col = \"grey60\") +\n  # add the actual points at each rate for date2\n  geom_point(aes(x = 2, \n                 y = recid_rate_date2), size = 4,\n             col = \"grey60\") \n  \ngg_line +\n  ggtitle(\"Recidivism Rates across EBBR programs\\n\") +\n  #only print caption if a program is missing data\n  {if(length(prg.NA)!=0) labs(caption = capture.output(cat(\"The following programs were missing data in some years:\", unique(toupper(prg.NA)), sep=\" \")))}+\n  theme(plot.caption=element_text(hjust=0))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>GDOC Recidivism Analysis</span>"
    ]
  },
  {
    "objectID": "va_cs.html#r-session",
    "href": "va_cs.html#r-session",
    "title": "GDOC Recidivism Analysis",
    "section": "R Session",
    "text": "R Session\n\n\nCode\n#for reproducibility\nsi &lt;- sessioninfo::session_info()\nsi$packages$library &lt;- NULL\nsi$platform$pandoc &lt;- NULL\nsi\n#&gt; ─ Session info ───────────────────────────────────────────────────────────────\n#&gt;  setting  value\n#&gt;  version  R version 4.4.1 (2024-06-14 ucrt)\n#&gt;  os       Windows 10 x64 (build 19045)\n#&gt;  system   x86_64, mingw32\n#&gt;  ui       RTerm\n#&gt;  language (EN)\n#&gt;  collate  English_United States.utf8\n#&gt;  ctype    English_United States.utf8\n#&gt;  tz       America/Denver\n#&gt;  date     2024-07-22\n#&gt; \n#&gt; ─ Packages ───────────────────────────────────────────────────────────────────\n#&gt;  package     * version date (UTC) lib source\n#&gt;  charlatan   * 0.5.1   2023-09-13 []  CRAN (R 4.4.1)\n#&gt;  cli           3.6.3   2024-06-21 []  CRAN (R 4.4.1)\n#&gt;  colorspace    2.1-0   2023-01-23 []  CRAN (R 4.4.1)\n#&gt;  digest        0.6.36  2024-06-23 []  CRAN (R 4.4.1)\n#&gt;  dplyr       * 1.1.4   2023-11-17 []  CRAN (R 4.4.1)\n#&gt;  evaluate      0.24.0  2024-06-10 []  CRAN (R 4.4.1)\n#&gt;  fansi         1.0.6   2023-12-08 []  CRAN (R 4.4.1)\n#&gt;  farver        2.1.2   2024-05-13 []  CRAN (R 4.4.1)\n#&gt;  fastmap       1.2.0   2024-05-15 []  CRAN (R 4.4.1)\n#&gt;  forcats     * 1.0.0   2023-01-29 []  CRAN (R 4.4.1)\n#&gt;  generics      0.1.3   2022-07-05 []  CRAN (R 4.4.1)\n#&gt;  ggplot2     * 3.5.1   2024-04-23 []  CRAN (R 4.4.1)\n#&gt;  ggrepel     * 0.9.5   2024-01-10 []  CRAN (R 4.4.1)\n#&gt;  glue          1.7.0   2024-01-09 []  CRAN (R 4.4.1)\n#&gt;  gtable        0.3.5   2024-04-22 []  CRAN (R 4.4.1)\n#&gt;  highr         0.11    2024-05-26 []  CRAN (R 4.4.1)\n#&gt;  hms           1.1.3   2023-03-21 []  CRAN (R 4.4.1)\n#&gt;  htmltools     0.5.8.1 2024-04-04 []  CRAN (R 4.4.1)\n#&gt;  jsonlite      1.8.8   2023-12-04 []  CRAN (R 4.4.1)\n#&gt;  knitr       * 1.48    2024-07-07 []  CRAN (R 4.4.1)\n#&gt;  labeling      0.4.3   2023-08-29 []  CRAN (R 4.4.0)\n#&gt;  lifecycle     1.0.4   2023-11-07 []  CRAN (R 4.4.1)\n#&gt;  lubridate   * 1.9.3   2023-09-27 []  CRAN (R 4.4.1)\n#&gt;  magrittr      2.0.3   2022-03-30 []  CRAN (R 4.4.1)\n#&gt;  munsell       0.5.1   2024-04-01 []  CRAN (R 4.4.1)\n#&gt;  pillar        1.9.0   2023-03-22 []  CRAN (R 4.4.1)\n#&gt;  pkgconfig     2.0.3   2019-09-22 []  CRAN (R 4.4.1)\n#&gt;  purrr       * 1.0.2   2023-08-10 []  CRAN (R 4.4.1)\n#&gt;  R6            2.5.1   2021-08-19 []  CRAN (R 4.4.1)\n#&gt;  Rcpp          1.0.13  2024-07-17 []  CRAN (R 4.4.1)\n#&gt;  readr       * 2.1.5   2024-01-10 []  CRAN (R 4.4.1)\n#&gt;  rlang         1.1.4   2024-06-04 []  CRAN (R 4.4.1)\n#&gt;  rmarkdown     2.27    2024-05-17 []  CRAN (R 4.4.1)\n#&gt;  rstudioapi    0.16.0  2024-03-24 []  CRAN (R 4.4.1)\n#&gt;  scales        1.3.0   2023-11-28 []  CRAN (R 4.4.1)\n#&gt;  sessioninfo   1.2.2   2021-12-06 []  CRAN (R 4.4.1)\n#&gt;  stringi       1.8.4   2024-05-06 []  CRAN (R 4.4.0)\n#&gt;  stringr     * 1.5.1   2023-11-14 []  CRAN (R 4.4.1)\n#&gt;  tibble      * 3.2.1   2023-03-20 []  CRAN (R 4.4.1)\n#&gt;  tidyr       * 1.3.1   2024-01-24 []  CRAN (R 4.4.1)\n#&gt;  tidyselect    1.2.1   2024-03-11 []  CRAN (R 4.4.1)\n#&gt;  tidyverse   * 2.0.0   2023-02-22 []  CRAN (R 4.4.1)\n#&gt;  timechange    0.3.0   2024-01-18 []  CRAN (R 4.4.1)\n#&gt;  tzdb          0.4.0   2023-05-12 []  CRAN (R 4.4.1)\n#&gt;  utf8          1.2.4   2023-10-22 []  CRAN (R 4.4.1)\n#&gt;  vctrs         0.6.5   2023-12-01 []  CRAN (R 4.4.1)\n#&gt;  whisker       0.4.1   2022-12-05 []  CRAN (R 4.4.1)\n#&gt;  withr         3.0.0   2024-01-16 []  CRAN (R 4.4.1)\n#&gt;  xfun          0.46    2024-07-18 []  CRAN (R 4.4.1)\n#&gt;  yaml          2.3.9   2024-07-05 []  CRAN (R 4.4.1)\n#&gt; \n#&gt; \n#&gt; ──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>GDOC Recidivism Analysis</span>"
    ]
  },
  {
    "objectID": "cwc_report.html",
    "href": "cwc_report.html",
    "title": "Center Wing Coalition Report",
    "section": "",
    "text": "Introduction\nIn recent years, there has been a growing push for reform within correctional systems aimed at rehabilitation and reducing recidivism rates. While these efforts are often well-intentioned, they come at a significant financial cost to taxpayers and lack substantial evidence of effectiveness. This report by the Center Wing Coalition aims to provide a data-driven justification for reducing the budget for GDOC’s correctional programs and eliminating existing staff vacancies, arguing that resources could be better allocated for proven methods of crime reduction rather than for providing services for people in prison.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Center Wing Coalition Report</span>"
    ]
  },
  {
    "objectID": "cwc_report.html#analysis-of-program-effectiveness",
    "href": "cwc_report.html#analysis-of-program-effectiveness",
    "title": "Center Wing Coalition Report",
    "section": "Analysis of Program Effectiveness",
    "text": "Analysis of Program Effectiveness\nThe correctional program in question has been in operation for several years with substantial funding allocated annually. However, comprehensive data analysis reveals several key shortcomings:\n\nRecidivism Rates: Despite the program’s objectives, recidivism rates among participants, provided by GDOC’s own Research and Analysis team, remain at 67 percent.1 This suggests that the program may not be effectively addressing the root causes of criminal behavior.\n\n\nCost-Effectiveness: The cost to maintain staffing for the programs opens avenues for unnecessary spending. This raises questions about the program’s efficiency in using taxpayer dollars and the agency’s need for such significant funding.\nLong-Term Outcomes: There are no proven long-term gains from these programs, and resources can be better put toward paying for staff training and retention.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Center Wing Coalition Report</span>"
    ]
  },
  {
    "objectID": "cwc_report.html#budgetary-considerations",
    "href": "cwc_report.html#budgetary-considerations",
    "title": "Center Wing Coalition Report",
    "section": "Budgetary Considerations",
    "text": "Budgetary Considerations\nThe financial resources allocated to this correctional program could be reallocated to more cost-effective strategies to maintain public safety. Examples include the following:\n\nInvestment in Education: Funding education and skill-building programs within prisons has shown a positive correlation with reduced recidivism rates and improved employability upon release.\nSupport for Community Reintegration: Enhanced support for transitional housing, job placement services, and mental health programs in communities can provide a more holistic approach to reducing crime and improving public safety.\nFront-end violent crime strategies: Increased law enforcement presence will deter crime in our communities.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Center Wing Coalition Report</span>"
    ]
  },
  {
    "objectID": "cwc_report.html#conclusion",
    "href": "cwc_report.html#conclusion",
    "title": "Center Wing Coalition Report",
    "section": "Conclusion",
    "text": "Conclusion\nThis bipartisan coalition recommends reallocating funding away from the correctional programs in question based on program effectiveness analysis and budgetary considerations. Doing so would not only maximize the impact of taxpayer investments but also enhance public safety by addressing the root causes of crime more effectively. By making informed decisions supported by data-driven insights, policymakers can ensure that funding prioritizes interventions that yield tangible and sustainable benefits for individuals and society as a whole.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Center Wing Coalition Report</span>"
    ]
  },
  {
    "objectID": "cwc_report.html#footnotes",
    "href": "cwc_report.html#footnotes",
    "title": "Center Wing Coalition Report",
    "section": "",
    "text": "The following programs were analyzed by the CWC for program years 2021 through 2022:\nAnger Management\nResidential Drug Abuse Program\nDialectical Behavior Therapy\nChallenge Program\nSteps Toward Awareness, Growth, and Emotional Strength Program\n↩︎",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Center Wing Coalition Report</span>"
    ]
  }
]